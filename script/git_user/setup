#!/usr/bin/env ruby
# This command needs to be run once as root, to setup the machine.

require 'etc'
require 'fileutils'
require 'pathname'


# Parameter processing.

if Process.euid != 0
  puts "This script needs to be run as superuser. Enter your password below."
  exec *(['sudo', $0] + ARGV)
end

if ARGV.length != 2
  puts <<END_USAGE
Usage: sudo #{$0} git_username webserver_username
git_username: the name of the git user (will be created by the script)
webserver_username: the user name for the Rails server process

Example: sudo #{$0} git #{Etc.getlogin}
END_USAGE
  exit
end
git_user = ARGV[0]
web_group_id = Etc.getpwnam(ARGV[1]).gid
web_group = Etc.getgrgid(web_group_id).name

# Create git user.

if RUBY_PLATFORM =~ /darwin/
  # OSX.
  
  # Find an available UID.
  git_user_id = `dscl . -list /Users`.split.
      map { |user| `dscl . -read /Users/#{user} UniqueID`.split.last.to_i }.
      sort.last + 1

  # Simulate adduser.
  command_prefix = ['dscl', '.', '-create', "/Users/#{git_user}"]
  [
    [],
    ['UserShell', '/bin/bash'],
    ['UniqueID', git_user_id.to_s],
    ['PrimaryGroupID', web_group_id.to_s],
    ['NFSHomeDirectory', "/Users/#{git_user}"],
  ].each do |command_suffix|
    command = command_prefix + command_suffix
    unless Kernel.system(*command)
      puts "Failed to create user #{git_user}\n Failed on: #{command.inspect}"
      exit
    end
  end
  
  git_home = File.join '/Users', git_user
else
  # Linux.
  new_user_command = ['useradd', '--gid', web_group, '--no-create-home',
      '--no-user-group', git_user]
  unless Kernel.system(*new_user_command)
    puts "Failed to create user #{git_user}"
    exit
  end

  git_home = File.join '/home', git_user
end

# Set up git user's homedir.
FileUtils.mkdir_p git_home
FileUtils.chmod_R 0750, git_home

git_ssh_dir = File.join git_home, '.ssh'
FileUtils.mkdir_p git_ssh_dir
FileUtils.chmod_R 0700, git_ssh_dir

git_keys = File.join git_ssh_dir, 'authorized_keys'
File.open(git_keys, 'w') { |f| f.write "\n" }
FileUtils.chmod 0600, git_keys

git_repos = File.join git_home, 'repos'
git_repo_keys = File.join git_repos, '.ssh_keys'
FileUtils.mkdir_p git_repos
FileUtils.chmod 0770, git_repos

install_keys_src = File.join git_home, 'install_keys.c'
File.open install_keys_src, 'w' do |f|
  f.write <<END_SOURCE
#include <unistd.h>
int main() {
  execl("/bin/cp", "cp", "#{git_repo_keys}", "#{git_keys}", NULL);
  return 0;
}
END_SOURCE
end
install_keys = File.join git_home, 'install_keys'
unless Kernel.system('gcc', '-o', install_keys, install_keys_src)
  puts "Failed to compile #{install_keys}"
  exit
end
FileUtils.rm install_keys_src

FileUtils.chown_R git_user, web_group, git_home

# NOTE: if the file is chowned after chmodding, the setuid bit is lost
FileUtils.chmod 04750, install_keys

# SELinux needs a home directory fixup.
if `which restorecon 2>&1`[0] == ?/
  Kernel.system "restorecon -R #{git_home}"
end

# Fedora makes homedirs 700, so the git user can't read the app directory.
Pathname.new(File.dirname(__FILE__)).descend do |dir|
  dir_stat = dir.stat
  next if dir_stat.mode & 0005 == 0005  # o+rx
  if dir_stat.mode & 0050 == 0050 && dir_stat.gid == web_group_id
    next  # g+rx and group matches
  end
  
  # git can't read this directory, so we must change its permissions.
  if dir_stat.gid == web_group_id  
    # The directory's group matches, so fix group permissions
    dir.chmod dir.stat.mode | 0050
    next
  end
  
  # Last resort: fix "other" permissions
  dir.chmod dir.stat.mode | 0005
end
